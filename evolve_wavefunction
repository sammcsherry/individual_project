import numpy as np

class Wavefunction:
    def __init__(self, hamiltonian, initial_state, time_step):
        self.hamiltonian = hamiltonian
        self.state = np.array(initial_state).reshape(-1, 1)  # Ensure state is a column vector
        self.time_step = time_step

    def apply_evolution_operator(self, state):
        """Apply the evolution operator to the state."""
        # Calculate the evolution operator U
        U = np.linalg.expm(-1j * self.hamiltonian * self.time_step)  # Use proper scaling with hbar if not set to 1
        return U @ state  # Evolve the state

    def normalize(self):
        """Normalize the wavefunction."""
        norm = np.linalg.norm(self.state)
        if norm != 0:
            self.state /= norm  # Normalize the state

    def evolve(self, num_steps):
        """Evolve the wavefunction."""
        for _ in range(num_steps):
            self.state = self.apply_evolution_operator(self.state)
            self.normalize()  # Ensure the state is normalized after each step

